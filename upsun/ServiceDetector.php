<?php

/**
 * #ddev-generated by ddev-upsun add-on
 * If you want to edit this file (not recommended) remove the line above.
 * Upsun Service Detector
 */

declare(strict_types=1);

namespace Upsun;

/**
 * Detects Upsun services and maps them to DDEV add-ons
 */
class ServiceDetector
{
    // Service type to DDEV add-on mapping
    private const SERVICE_TO_ADDON = [
        'elasticsearch' => 'ddev/ddev-elasticsearch',
        'kafka' => 'chx/ddev-kafka',
        'memcached' => 'ddev/ddev-memcached',
        'mongodb' => 'ddev/ddev-mongo',
        'opensearch' => 'ddev/ddev-opensearch',
        'rabbitmq' => 'ddev/ddev-rabbitmq',
        'redis' => 'ddev/ddev-redis',
        'solr' => 'ddev/ddev-solr',
        'varnish' => 'ddev/ddev-varnish'
    ];

    private string $projectRoot;
    private string $upsunDir;

    public function __construct(string $projectRoot)
    {
        $this->projectRoot = rtrim($projectRoot, '/');
        $this->upsunDir = $this->projectRoot . '/.upsun';
    }

    /**
     * Detect services and create runtime dependencies
     */
    public function detectAndCreateDependencies(): void
    {
        $services = $this->detectServices();

        if (empty($services)) {
            echo "‚ÑπÔ∏è  No supported services detected in Upsun configuration\n";
            return;
        }

        $this->createRuntimeDependencies($services);
        $this->createServiceVersions($services);
    }

    /**
     * Parse Upsun config files and detect services
     */
    private function detectServices(): array
    {
        $services = [];

        // Try Upsun Flex format first (.upsun directory)
        if (is_dir($this->upsunDir)) {
            $configFile = $this->upsunDir . '/config.yaml';
            $appFile = $this->upsunDir . '/.platform.app.yaml';

            // Check both possible config locations in .upsun directory
            foreach ([$configFile, $appFile] as $file) {
                if (file_exists($file)) {
                    $content = file_get_contents($file);
                    $services = $this->parseServicesFromContent($content);
                    if (!empty($services)) {
                        break; // Use first file with services
                    }
                }
            }
        }

        // If no services found, try Upsun Fixed format (.platform directory)
        if (empty($services)) {
            $services = $this->detectFixedFormatServices();
        }

        return $services;
    }

    /**
     * Parse service definitions from YAML content
     */
    private function parseServicesFromContent(string $content): array
    {
        $services = [];

        // Look for services section
        if (!preg_match('/^services:\s*$/m', $content, $matches, PREG_OFFSET_CAPTURE)) {
            return $services;
        }

        $servicesStart = $matches[0][1] + strlen($matches[0][0]);
        $remaining = substr($content, $servicesStart);

        // Find service definitions like "servicename:" followed by "type: servicetype:version"
        if (preg_match_all('/^\s*(\w+):\s*$.*?^\s*type:\s*(\w+):([0-9.]+)/ms', $remaining, $serviceMatches, PREG_SET_ORDER)) {
            foreach ($serviceMatches as $match) {
                $serviceName = $match[1];
                $serviceType = $match[2];
                $version = $match[3];

                if (isset(self::SERVICE_TO_ADDON[$serviceType])) {
                    $services[] = [
                        'name' => $serviceName,
                        'type' => $serviceType,
                        'version' => $version,
                        'addon' => self::SERVICE_TO_ADDON[$serviceType]
                    ];
                    echo "‚úÖ Detected {$serviceType} service '{$serviceName}' (version {$version})\n";
                }
            }
        }

        return $services;
    }

    /**
     * Detect services from Upsun Fixed format (.platform directory)
     */
    private function detectFixedFormatServices(): array
    {
        $servicesFile = $this->projectRoot . '/.platform/services.yaml';
        $services = [];

        if (!file_exists($servicesFile)) {
            return $services;
        }

        $content = file_get_contents($servicesFile);
        if ($content === false) {
            return $services;
        }

        // Fixed format has services at the root level, not nested under "services:"
        // Format: "servicename:\n    type: servicetype:version"
        if (preg_match_all('/^(\w+):\s*$.*?^\s*type:\s*(\w+):([0-9.]+)/ms', $content, $serviceMatches, PREG_SET_ORDER)) {
            foreach ($serviceMatches as $match) {
                $serviceName = $match[1];
                $serviceType = $match[2];
                $version = $match[3];

                if (isset(self::SERVICE_TO_ADDON[$serviceType])) {
                    $services[] = [
                        'name' => $serviceName,
                        'type' => $serviceType,
                        'version' => $version,
                        'addon' => self::SERVICE_TO_ADDON[$serviceType]
                    ];
                    echo "‚úÖ Detected {$serviceType} service '{$serviceName}' (version {$version}) from Fixed format\n";
                }
            }
        }

        return $services;
    }

    /**
     * Create runtime dependencies file for DDEV
     */
    private function createRuntimeDependencies(array $services): void
    {
        $addons = array_unique(array_column($services, 'addon'));
        $deps = implode("\n", $addons) . "\n";
        
        if (file_put_contents('./.runtime-deps-upsun', $deps) === false) {
            echo "‚ùå Failed to create runtime dependencies file\n";
            return;
        }

        echo "üì¶ Creating runtime dependencies for " . count($addons) . " service add-on(s)\n";
        foreach ($addons as $addon) {
            echo "  - {$addon}\n";
        }
    }

    /**
     * Create environment file with service versions
     */
    private function createServiceVersions(array $services): void
    {
        if (empty($services)) {
            return;
        }

        $envContent = "# Upsun service versions (auto-generated by ddev-upsun)\n";
        $envContent .= "# Use 'ddev dotenv set' to load these variables\n\n";

        foreach ($services as $service) {
            $envVar = 'UPSUN_' . strtoupper($service['type']) . '_VERSION';
            $envContent .= "{$envVar}={$service['version']}\n";
        }

        if (file_put_contents('./.env.upsun-services', $envContent) === false) {
            echo "‚ùå Failed to create service versions file\n";
            return;
        }

        echo "üíæ Created .env.upsun-services with version information\n";
    }
}