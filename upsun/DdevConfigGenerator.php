<?php

/**
 * #ddev-generated by ddev-upsun add-on
 * If you want to edit this file (not recommended) remove the line above.
 * DdevConfigGenerator
 *
 * This script is executed when the Upsun add-on is installed via `ddev add-on get`.
 * It detects and processes Upsun configuration files to generate DDEV equivalents.
 */

declare(strict_types=1);

namespace Upsun;

/**
 * DDEV Configuration Generator
 * 
 * Translates parsed Upsun configuration into equivalent DDEV configuration files.
 */
class DdevConfigGenerator
{
    private UpsunConfigParserInterface $parser;
    private string $projectRoot;
    private string $ddevDir;

    // Upsun PHP version -> DDEV PHP version
    private const PHP_VERSION_MAP = [
        '8.1' => '8.1',
        '8.2' => '8.2', 
        '8.3' => '8.3',
        '8.4' => '8.4',
        '8.5' => '8.5'
    ];

    // Upsun database service type -> DDEV database service type
    private const DATABASE_SERVICE_MAP = [
        'mysql' => 'mariadb',        // Upsun 'mysql' means MariaDB
        'mariadb' => 'mariadb',      // Upsun 'mariadb' means MariaDB  
        'oracle-mysql' => 'mysql',   // Upsun 'oracle-mysql' means MySQL
        'postgresql' => 'postgres'   // Upsun 'postgresql' -> DDEV 'postgres'
    ];

    // Upsun database service -> supported versions (Upsun version -> DDEV version)
    private const DATABASE_VERSION_MAP = [
        // Oracle MySQL versions (oracle-mysql service in Upsun -> mysql in DDEV)
        'oracle-mysql' => [
            '5.7' => '5.7',
            '8.0' => '8.0',
            '8.4' => '8.4'  // DDEV supports MySQL 8.4
        ],
        // MariaDB versions (mysql/mariadb services in Upsun -> mariadb in DDEV)
        // Note: mysql service in Upsun refers to MariaDB, not Oracle MySQL
        'mysql' => [
            // Current versions
            '10.6' => '10.6',
            '10.11' => '10.11',
            '11.4' => '11.4',
            '11.8' => '11.8',
            // Deprecated versions (for legacy Platform.sh compatibility)
            // DDEV supports MariaDB 5.5-10.8, 10.11, 11.4, 11.8
            '5.5' => '5.5',
            '10.0' => '10.0',   // Use exact versions where DDEV supports them
            '10.1' => '10.1',
            '10.2' => '10.2',
            '10.3' => '10.3',
            '10.4' => '10.4',
            '10.5' => '10.5',
        ],
        'mariadb' => [
            // Current versions
            '10.6' => '10.6',
            '10.11' => '10.11',
            '11.4' => '11.4',
            '11.8' => '11.8',
            // Deprecated versions (for legacy Platform.sh compatibility)
            // DDEV supports MariaDB 5.5-10.8, 10.11, 11.4, 11.8
            '5.5' => '5.5',
            '10.0' => '10.0',   // Use exact versions where DDEV supports them
            '10.1' => '10.1',
            '10.2' => '10.2',
            '10.3' => '10.3',
            '10.4' => '10.4',
            '10.5' => '10.5',
        ],
        // PostgreSQL versions (postgresql service in Upsun -> postgres in DDEV)
        // DDEV supports PostgreSQL 9-17
        'postgresql' => [
            // Current versions
            '12' => '12',
            '13' => '13',
            '14' => '14',
            '15' => '15',
            '16' => '16',
            '17' => '17',
            // Deprecated versions
            '9.3' => '9',
            '9.4' => '9',
            '9.5' => '9',
            '9.6' => '9',
            '10' => '10',
            '11' => '11'
        ]
    ];


    public function __construct(UpsunConfigParserInterface $parser, string $projectRoot)
    {
        $this->parser = $parser;
        $this->projectRoot = rtrim($projectRoot, '/');
        $this->ddevDir = $this->projectRoot . '/.ddev';
        
        if (!is_dir($this->ddevDir)) {
            if (!mkdir($this->ddevDir, 0755, true)) {
                throw new DdevConfigException("Unable to create .ddev directory: {$this->ddevDir}");
            }
        }
    }

    /**
     * Generate DDEV configuration from parsed Upsun configuration
     */
    public function generate(): void
    {
        $this->generateDDEVConfigFromUpsunConfig();
        $this->createMountDirectories();
        $this->generateUpsunDockerfile();
    }


    /**
     * Generate Upsun-specific configuration file
     */
    private function generateDDEVConfigFromUpsunConfig(): void
    {
        $configFile = $this->ddevDir . '/config.upsun.yaml';
        
        $config = [];

        // Disable DDEV's settings management so Upsun apps can use Platform.sh ConfigReader
        $config['disable_settings_management'] = true;

        // Remove settings.ddev.php if it exists since we're disabling settings management
        $settingsDdevFile = $this->projectRoot . '/web/sites/default/settings.ddev.php';
        if (file_exists($settingsDdevFile)) {
            if (unlink($settingsDdevFile)) {
                echo "✅ Removed settings.ddev.php (disable_settings_management is enabled)\n";
            } else {
                echo "⚠️  Failed to remove settings.ddev.php\n";
            }
        }

        // Don't override project type - users configure this via `ddev config`
        // Our config.upsun.yaml supplements the main config without changing project type

        $docRoot = $this->parser->getDocumentRoot();
        if ($docRoot) {
            $config['docroot'] = $docRoot;
        }

        $phpVersion = $this->parser->getPhpVersion();
        if ($phpVersion && isset(self::PHP_VERSION_MAP[$phpVersion])) {
            $config['php_version'] = self::PHP_VERSION_MAP[$phpVersion];
        }

        $nodejsVersion = $this->parser->getNodejsVersion();
        if ($nodejsVersion) {
            $config['nodejs_version'] = $nodejsVersion;
        }

        $dbConfig = $this->parser->getDatabaseConfig();
        if ($dbConfig) {
            $service = $dbConfig['service'];
            $version = $dbConfig['version'];

            if (isset(self::DATABASE_SERVICE_MAP[$service])) {
                $config['database'] = [
                    'type' => self::DATABASE_SERVICE_MAP[$service]
                ];

                if (isset(self::DATABASE_VERSION_MAP[$service][$version])) {
                    $config['database']['version'] = self::DATABASE_VERSION_MAP[$service][$version];
                }
            }
        }

        // Add placeholder arrays
        $config['additional_hostnames'] = [];
        $config['additional_fqdns'] = [];

        // Add environment variables
        $envVars = $this->parser->getEnvironmentVariables();
         $webEnv = [];

        // Add user-defined environment variables
        foreach ($envVars as $key => $value) {
            $webEnv[] = "{$key}={$value}";
        }

        // Add PLATFORM_* environment variables
        require_once __DIR__ . '/PlatformEnvironmentGenerator.php';
        $platformGenerator = new PlatformEnvironmentGenerator($this->parser, $this->projectRoot);
        $platformVars = $platformGenerator->generatePlatformVariables();

        foreach ($platformVars as $key => $value) {
            $webEnv[] = "{$key}={$value}";
        }

        // Add DDEV service environment variables that .environment file expects
        $this->addDdevServiceVariables($webEnv);

        if (!empty($webEnv)) {
            $config['web_environment'] = $webEnv;
        }

        // Add PHP extensions as webimage_extra_packages
        $this->addPhpExtensions($config);

        // Add early composer install to ensure dependencies are available
        // This must run first before any scripts that depend on vendor/
        $hooksConfig = [];

        // On drupal projects the normal chmod +w of sites/default doesn't happen
        // because settings_management is disabled, so do it here
        $hooksConfig['pre-start'][] = [
            'exec-host' => 'chmod +w ${DDEV_DOCROOT:-web}/sites/default ${DDEV_DOCROOT:-web}/sites/default/settings*php 2>/dev/null || true',
        ];
        $hooksConfig['post-start'][] = [
            'exec' => 'chmod +w ${DDEV_DOCROOT:-web}/sites/default ${DDEV_DOCROOT:-web}/sites/default/settings*php 2>/dev/null || true',
        ];

        $hooksConfig['post-start'][] = [
            'exec' => 'if [ -f composer.json ] && [ ! -d vendor ]; then composer install --no-dev --optimize-autoloader; fi'
        ];

        // Add early drush configuration symlink for projects with drush
        // This must run before Upsun scripts so they can populate the symlinked file
        $hooksConfig['post-start'][] = [
            'exec' => 'if [ -f vendor/bin/drush ]; then mkdir -p ~/.drush; ln -sf /var/www/html/.drush/drush.yml ~/.drush/drush.yml 2>/dev/null || true; fi'
        ];

        // Add hooks from Upsun configuration
        $hooks = $this->parser->getHooks();
        
        // Map Upsun hooks to DDEV hooks
        if (isset($hooks['build'])) {
            $buildScript = trim($hooks['build']);
            if (!empty($buildScript)) {
                $hooksConfig['post-start'][] = [
                    'exec' => "cd /var/www/html\n" . $buildScript
                ];
            }
        }
        
        if (isset($hooks['deploy'])) {
            $deployScript = trim($hooks['deploy']);
            if (!empty($deployScript)) {
                $hooksConfig['post-start'][] = [
                    'exec' => "cd /var/www/html\n" . $deployScript
                ];
            }
        }

        // Add Drupal config import if this is a Drupal project with drush and actual config files
        $hooksConfig['post-start'][] = [
            'exec' => 'if [ -f vendor/bin/drush ] && [ -d config/sync ] && [ "$(find config/sync -name "*.yml" 2>/dev/null | wc -l)" -gt 0 ]; then cd web && ../vendor/bin/drush config:import --yes || true; fi'
        ];

        if (!empty($hooksConfig)) {
            $config['hooks'] = $hooksConfig;
        }
        
        // Generate YAML manually to ensure proper multiline formatting for hooks
        $yaml = yaml_emit($config, YAML_UTF8_ENCODING);
        if ($yaml === false) {
            throw new DdevConfigException("Failed to generate YAML for Upsun config");
        }
        
        // Fix multiline hooks to use '|' instead of '|-' 
        if (!empty($hooksConfig)) {
            $yaml = preg_replace('/exec: \|-/', 'exec: |', $yaml);
        }

        // Add header comments with proper DDEV generation marker
        $header = "#ddev-generated by ddev-upsun add-on from .upsun/config.yaml\n";
        $header .= "# If you want to edit this file (not recommended) remove the line above.\n\n";

        if (file_put_contents($configFile, $header . $yaml) === false) {
            throw new DdevConfigException("Failed to write Upsun config file: {$configFile}");
        }
    }

    /**
     * Create mount directories based on Upsun mounts configuration
     */
    private function createMountDirectories(): void
    {
        $mounts = $this->parser->getMounts();
        
        foreach ($mounts as $mountPath => $mountTarget) {
            // Remove leading slash and normalize path
            $relativePath = ltrim($mountPath, '/');
            $fullPath = $this->projectRoot . '/' . $relativePath;
            
            // Skip if directory already exists
            if (is_dir($fullPath)) {
                continue;
            }
            
            // Create directory structure
            if (!mkdir($fullPath, 0755, true)) {
                echo "Warning: Could not create mount directory: {$fullPath}\n";
            } else {
                echo "Created mount directory: {$relativePath}\n";
            }
        }
    }

    /**
     * Generate Upsun-specific Dockerfile for web-build
     */
    private function generateUpsunDockerfile(): void
    {
        $webBuildDir = $this->ddevDir . '/web-build';
        
        // Create web-build directory if it doesn't exist
        if (!is_dir($webBuildDir)) {
            if (!mkdir($webBuildDir, 0755, true)) {
                throw new DdevConfigException("Unable to create web-build directory: {$webBuildDir}");
            }
        }
        
        $dockerFile = $webBuildDir . '/Dockerfile.upsun';
        
        // Dockerfile content to create the /app symlink
        $content = "#ddev-generated by ddev-upsun add-on\n";
        $content .= "# If you want to edit this file (not recommended) remove the line above.\n";
        $content .= "# Creates /app symlink that Upsun scripts expect (PLATFORM_APP_DIR=/app)\n\n";
        $content .= "RUN ln -sf /var/www/html /app\n";
        
        if (file_put_contents($dockerFile, $content) === false) {
            throw new DdevConfigException("Failed to write Upsun Dockerfile: {$dockerFile}");
        }
    }

    /**
     * Add PHP runtime extensions as webimage_extra_packages
     */
    private function addPhpExtensions(array &$config): void
    {
        $extensions = $this->parser->getPhpExtensions();
        $phpVersion = $this->parser->getPhpVersion();
        
        if (empty($extensions) || !$phpVersion) {
            return;
        }
        
        // Extensions that don't need separate packages (built-in or special handling)
        $skipExtensions = [
            'sodium',    // Built into PHP 8.0+
            'blackfire', // Provided by DDEV
            'pdo_pgsql', // provided by DDEV
            'pgsql'

        ];
        
        $packages = [];
        $addedExtensions = [];
        foreach ($extensions as $extension) {
            if (!in_array($extension, $skipExtensions)) {
                // Map extension to PHP package name (php8.4-redis, etc.)
                $packages[] = "php{$phpVersion}-{$extension}";
                $addedExtensions[] = $extension;
            }
        }
        
        if (!empty($packages)) {
            $config['webimage_extra_packages'] = $packages;
            echo "✅ Added PHP extensions: " . implode(', ', $addedExtensions) . "\n";
        }
        
        // Note about skipped extensions
        $skippedExtensions = array_intersect($extensions, $skipExtensions);
        if (!empty($skippedExtensions)) {
            echo "ℹ️  Skipped extensions (built-in or special): " . implode(', ', $skippedExtensions) . "\n";
        }
    }

    /**
     * Add DDEV service environment variables that .environment file expects
     */
    private function addDdevServiceVariables(array &$webEnv): void
    {
        // Get database configuration to determine service type
        $dbConfig = $this->parser->getDatabaseConfig();

        if ($dbConfig) {
            $service = $dbConfig['service'];

            // Map database service types to variable prefixes
            $variablePrefix = '';
            switch ($service) {
                case 'mysql':
                case 'mariadb':
                    $variablePrefix = 'MARIADB';
                    break;
                case 'oracle-mysql':
                    $variablePrefix = 'MYSQL';
                    break;
                case 'postgresql':
                    $variablePrefix = 'POSTGRES';
                    break;
                default:
                    $variablePrefix = 'MARIADB'; // Default fallback
            }

            // Add database environment variables using DDEV defaults
            $webEnv[] = "{$variablePrefix}_HOST=db";
            $webEnv[] = "{$variablePrefix}_PORT=" . ($service === 'postgresql' ? '5432' : '3306');
            $webEnv[] = "{$variablePrefix}_PATH=db";
            $webEnv[] = "{$variablePrefix}_USERNAME=db";
            $webEnv[] = "{$variablePrefix}_PASSWORD=db";
            $webEnv[] = "{$variablePrefix}_SCHEME=" . ($service === 'postgresql' ? 'pgsql' : 'mysql');
        }

        // Add Redis environment variables if Redis is configured
        $redisConfig = $this->parser->getRedisConfig();
        if ($redisConfig) {
            $webEnv[] = "REDIS_HOST=redis";
            $webEnv[] = "REDIS_PORT=6379";
            $webEnv[] = "REDIS_SCHEME=redis";
        }

        // Add DB_* environment variables that settings.upsun.php expects
        // These map from the service-specific variables above
        if ($dbConfig) {
            $service = $dbConfig['service'];
            $isPostgres = ($service === 'postgresql');

            $webEnv[] = "DB_HOST=db";
            $webEnv[] = "DB_PORT=" . ($isPostgres ? '5432' : '3306');
            $webEnv[] = "DB_PATH=db";
            $webEnv[] = "DB_DATABASE=db";
            $webEnv[] = "DB_USERNAME=db";
            $webEnv[] = "DB_PASSWORD=db";
            $webEnv[] = "DB_SCHEME=" . ($isPostgres ? 'pgsql' : 'mysql');
            $webEnv[] = "DATABASE_URL=" . ($isPostgres ? 'pgsql' : 'mysql') . "://db:db@db:" . ($isPostgres ? '5432' : '3306') . "/db";
        }

        // Add Redis URL if Redis is configured
        if ($redisConfig) {
            $webEnv[] = "CACHE_HOST=redis";
            $webEnv[] = "CACHE_PORT=6379";
            $webEnv[] = "CACHE_SCHEME=redis";
            $webEnv[] = "CACHE_URL=redis://redis:6379";
            $webEnv[] = "REDIS_URL=redis://redis:6379";
        }
    }


    /**
     * Get supported PHP versions
     */
    public static function getSupportedPhpVersions(): array
    {
        return array_keys(self::PHP_VERSION_MAP);
    }

    /**
     * Get supported database services  
     */
    public static function getSupportedDatabaseServices(): array
    {
        return array_keys(self::DATABASE_SERVICE_MAP);
    }

    /**
     * Check if a PHP version is supported
     */
    public static function isPhpVersionSupported(string $version): bool
    {
        return isset(self::PHP_VERSION_MAP[$version]);
    }

    /**
     * Check if a database service and version combination is supported
     */
    public static function isDatabaseSupported(string $service, string $version): bool
    {
        return isset(self::DATABASE_SERVICE_MAP[$service]) && 
               isset(self::DATABASE_VERSION_MAP[$service][$version]);
    }
}

/**
 * Custom exception for DDEV configuration generation errors
 */
class DdevConfigException extends \Exception
{
}