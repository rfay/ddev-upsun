<?php

/**
 * #ddev-generated by ddev-upsun add-on
 * If you want to edit this file (not recommended) remove the line above.
 * PlatformEnvironmentGenerator
 *
 * Generates PLATFORM_* environment variables for Upsun application compatibility.
 */

declare(strict_types=1);

namespace Upsun;

/**
 * Platform Environment Variables Generator
 *
 * Generates all required PLATFORM_* environment variables that Upsun applications
 * expect to be available in the runtime environment.
 */
class PlatformEnvironmentGenerator
{
    private UpsunConfigParserInterface $parser;
    private string $projectRoot;

    public function __construct(UpsunConfigParserInterface $parser, string $projectRoot)
    {
        $this->parser = $parser;
        $this->projectRoot = rtrim($projectRoot, '/');
    }

    /**
     * Generate all PLATFORM_* environment variables
     *
     * @return array Array of PLATFORM_* variables as key => value pairs
     */
    public function generatePlatformVariables(): array
    {
        return [
            'PLATFORM_APP_DIR' => '/app',
            'PLATFORM_APPLICATION' => $this->generateApplicationData(),
            'PLATFORM_APPLICATION_NAME' => $this->parser->getApplicationName() ?? 'app',
            'PLATFORM_BRANCH' => $this->getCurrentGitBranch(),
            'PLATFORM_DOCUMENT_ROOT' => $this->getDocumentRootPath(),
            'PLATFORM_ENVIRONMENT_TYPE' => 'development',
            'PLATFORM_PROJECT_ENTROPY' => $this->generateEntropy(),
            'PLATFORM_RELATIONSHIPS' => $this->generateRelationships(),
            'PLATFORM_ROUTES' => $this->generateRoutes(),
            'PLATFORM_VARIABLES' => $this->generateVariables(),
            'PLATFORM_SMTP_HOST' => 'localhost:1025', // DDEV's mailpit
            'PLATFORM_CACHE_DIR' => '/mnt/ddev-global-cache/ddev-upsun/' . (getenv('DDEV_PROJECT') ?: 'default'),
            'PLATFORM_TREE_ID' => $this->generateTreeId(),
        ];
    }

    /**
     * Get current Git branch
     */
    private function getCurrentGitBranch(): string
    {
        $output = shell_exec('cd ' . escapeshellarg($this->projectRoot) . ' && git rev-parse --abbrev-ref HEAD 2>/dev/null');
        return $output ? trim($output) : 'main';
    }

    /**
     * Get document root path for PLATFORM_DOCUMENT_ROOT
     */
    private function getDocumentRootPath(): string
    {
        $docRoot = $this->parser->getDocumentRoot();
        return $docRoot ? '/var/www/html/' . ltrim($docRoot, '/') : '/var/www/html';
    }

    /**
     * Generate random entropy string for PLATFORM_PROJECT_ENTROPY
     */
    private function generateEntropy(): string
    {
        return hash('sha256', random_bytes(32));
    }

    /**
     * Generate PLATFORM_RELATIONSHIPS as Base64-encoded JSON
     */
    private function generateRelationships(): string
    {
        $relationships = [];

        // Add database relationship if configured
        $dbConfig = $this->parser->getDatabaseConfig();
        if ($dbConfig) {
            $relationships[$dbConfig['name']] = [$this->generateDatabaseRelationship($dbConfig)];
        }

        // Add Redis relationship if configured
        $redisConfig = $this->parser->getRedisConfig();
        if ($redisConfig) {
            $relationships[$redisConfig['relationship_name']] = [$this->generateRedisRelationship($redisConfig)];
        }

        return base64_encode(json_encode($relationships));
    }

    /**
     * Generate database relationship structure
     */
    private function generateDatabaseRelationship(array $dbConfig): array
    {
        // Map Upsun service types to database schemes and ports (DDEV defaults)
        $serviceMap = [
            'mysql' => ['scheme' => 'mysql', 'port' => 3306, 'rel' => 'mysql'],
            'mariadb' => ['scheme' => 'mysql', 'port' => 3306, 'rel' => 'mysql'],
            'oracle-mysql' => ['scheme' => 'mysql', 'port' => 3306, 'rel' => 'mysql'],
            'postgresql' => ['scheme' => 'pgsql', 'port' => 5432, 'rel' => 'pgsql'],
        ];

        $service = $dbConfig['service'];
        $serviceInfo = $serviceMap[$service] ?? $serviceMap['mysql']; // Default to mysql

        return [
            'username' => 'db',
            'scheme' => $serviceInfo['scheme'],
            'service' => $dbConfig['name'],
            'fragment' => null,
            'ip' => '127.0.0.1',
            'hostname' => 'db',
            'public' => false,
            'cluster' => 'ddev-cluster',
            'host' => 'db',
            'rel' => $serviceInfo['rel'],
            'query' => [
                'is_master' => true
            ],
            'path' => 'db',
            'password' => 'db',
            'type' => $service . ':' . $dbConfig['version'],
            'port' => $serviceInfo['port'],
            'host_mapped' => false
        ];
    }

    /**
     * Generate Redis relationship structure
     */
    private function generateRedisRelationship(array $redisConfig): array
    {
        return [
            'username' => null,
            'scheme' => 'redis',
            'service' => $redisConfig['service_name'],
            'fragment' => null,
            'ip' => '127.0.0.1',
            'hostname' => 'redis',
            'public' => false,
            'cluster' => 'ddev-cluster',
            'host' => 'redis',
            'rel' => 'redis',
            'query' => [],
            'path' => null,
            'password' => null,
            'type' => 'redis:' . $redisConfig['version'],
            'port' => 6379,
            'host_mapped' => false
        ];
    }

    /**
     * Generate PLATFORM_ROUTES as Base64-encoded JSON
     */
    private function generateRoutes(): string
    {
        // Get DDEV_PRIMARY_URL (provided via temp file workaround or available in web container)
        $primaryUrl = getenv('DDEV_PRIMARY_URL');

        if (!$primaryUrl) {
            throw new \Exception('DDEV_PRIMARY_URL not available - check install.yaml temp file workaround');
        }

        // Ensure URL ends with / to match Upsun format
        $primaryUrlWithSlash = rtrim($primaryUrl, '/') . '/';

        $routes = [
            $primaryUrlWithSlash => [
                'attributes' => new \stdClass(), // Empty object, not array
                'id' => null,
                'original_url' => 'https://{all}/',
                'primary' => true,
                'production_url' => $primaryUrlWithSlash,
                'type' => 'upstream',
                'upstream' => $this->parser->getApplicationName() ?? 'app'
            ]
        ];

        return base64_encode(json_encode($routes));
    }

    /**
     * Generate PLATFORM_VARIABLES as Base64-encoded JSON
     */
    private function generateVariables(): string
    {
        $variables = [];

        // Add user-defined environment variables from Upsun config
        $envVars = $this->parser->getEnvironmentVariables();
        foreach ($envVars as $key => $value) {
            // Skip PLATFORM_* variables to avoid conflicts
            if (!str_starts_with($key, 'PLATFORM_')) {
                $variables[$key] = $value;
            }
        }

        return base64_encode(json_encode($variables));
    }

    /**
     * Generate PLATFORM_APPLICATION as Base64-encoded JSON
     *
     * This contains application configuration data that settings.php checks for
     */
    private function generateApplicationData(): string
    {
        $appData = [
            'name' => $this->parser->getApplicationName() ?? 'app',
            'type' => 'php:' . ($this->parser->getPhpVersion() ?? '8.3'),
            'disk' => 2048,
            'size' => 'S',
            'preflight' => [
                'enabled' => true,
                'ignored_rules' => []
            ]
        ];

        return base64_encode(json_encode($appData));
    }

    /**
     * Generate PLATFORM_TREE_ID (Git commit hash or fallback)
     */
    private function generateTreeId(): string
    {
        // Try to get current Git commit hash
        $output = shell_exec('cd ' . escapeshellarg($this->projectRoot) . ' && git rev-parse HEAD 2>/dev/null');

        if ($output && strlen(trim($output)) === 40) {
            return trim($output);
        }

        // Fallback to a deterministic hash based on project path
        return hash('sha1', $this->projectRoot . time());
    }
}